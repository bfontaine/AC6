# -*- Makefile -*-
BTARGET  = $(TARGET).byte
OTARGET  = $(TARGET).native
BLTARGET = $(TARGET).cma
BNTARGET = $(TARGET).cmxa
STARGET  = $(OTARGET)

#########################
## Tools configuration ##
#########################

# Menhir can be told to produce a parser that explains what
# it is doing. 
ifeq ($(DEBUGPARSING), yes)
  MENHIROPT=-yaccflag --explain -yaccflag --trace
else
  MENHIROPT=-yaccflag --explain 
endif

# In Emacs, use classic display to enable error jumping.
TERM = $(shell echo $$TERM)
ifeq ($(TERM), dumb)
 OCAMLBUILD = ocamlbuild -cflag "-dtypes" -tag debug -classic-display -no-hygiene $(MENHIROPT)
else
 OCAMLBUILD = ocamlbuild -no-hygiene $(MENHIROPT)
endif

OCAMLDOC = ocamldoc
HEADACHE = headache

# Vim syntax directory
VIM_SYN_DIR=~/.vim/syntax

#########
# Rules #
#########

.PHONY: configure all-generic byte opt doc clean dist install uninstall headers clear

all-generic: configure clear $(STARGET) $(TARGET)

$(TARGET):
	ln -s $(STARGET) $(TARGET)

clear:
	rm -f $(STARGET)

opt: $(OTARGET)

byte: $(BTARGET)

%:
	@ $(OCAMLBUILD) src/$@

byte-debug:
	$(OCAMLBUILD) -tag debug src/$(BTARGET)	
	rm -f $(STARGET)
	ln -s $(BTARGET) $(STARGET) 

ifeq ($(strip $(PREFIX)),)
install uninstall:
	@echo "Cannot (un)install $(EXECUTABLE): the PREFIX variable is undefined." && false
else
install: $(EXECUTABLE)
	mkdir -p $(PREFIX)/bin/
	install $(STARGET) $(PREFIX)/bin/$(TARGET)
uninstall:
	/bin/rm -f $(PREFIX)/bin/$(TARGET)
endif

#######################
# Administrative part #
#######################

headers:
	for i in src/*.ml src/*.mli src/*.mly; do \
	   $(HEADACHE) -h admin/header -c admin/headache.cfg $$i; \
        done

clean:
	@ $(OCAMLBUILD) -clean
	find -name '*~' -exec rm '{}' \;
	rm -fr *~ $(TARGET) $(PACKAGE) $(PACKAGE).tar.gz

doc: byte
	$(OCAMLBUILD) $(TARGET).docdir/index.html
	mkdir -p doc/html
	rm -f $(TARGET).docdir/style.css 2> /dev/null
	mv $(TARGET).docdir/* doc/html
	rm $(TARGET).docdir

dist:
	rm -fr $(PACKAGE)
	mkdir $(PACKAGE)
	for i in `cat distributed_files` doc/html/*.html; do	\
	  if test -f $$i; then					\
            cp -fr --parents $$i $(PACKAGE);			\
          else							\
	    mkdir -p $$i;					\
          fi;					                \
        done
	tar cvfz $(PACKAGE).tar.gz $(PACKAGE)

check: all
	$(MAKE) -C tests check

submit: dist sign
	 curl -s -F datafile=@$(PACKAGE).tar.gz.sig \
		 -e "http://www.regis-gianas.com/~clap2013/" \
		 -A "--> http://bit.ly/i-love-ac6 (like Mozilla)" \
		  http://www.regis-gianas.com/~clap2013/cgi-bin/save.cgi \
		  | grep "p>" | sed 's/<\/\?p>//g'

sign: dist
	gpg --yes --output $(PACKAGE).tar.gz.sig --sign $(PACKAGE).tar.gz


#########
# Bonus #
#########

vim-clap-syntax: ${VIM_SYN_DIR}/clap.vim
	@echo "Add the line below in your ~/.vimrc:"
	@echo
	@echo "\tau BufNewFile,BufRead *.clap set ft=clap"
	@echo

${VIM_SYN_DIR}/clap.vim: ./utils/clap.vim ${VIM_SYN_DIR}
	cp $< $@

${VIM_SYN_DIR}:
	mkdir -p $@
